#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("expressserver:server");
var http = require("http");

var cluster = require("cluster");
var numCPUs = require("os").cpus().length;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

if (1) {
  if (cluster.isMaster) {
    // Fork启一个Worker 进程
    for (var i = 0; i < numCPUs; i++) {
      cluster.fork();
    }

    cluster.on("listening", (worker, address) => {
      console.log(
        "worker " +
          worker.process.pid +
          ", listen: " +
          address.address +
          ":" +
          address.port
      );
    });

    cluster.on("exit", (worker, code, signal) => {
      console.log("worker " + worker.process.pid + " died");
      //重启一个worker进程
      cluster.fork();
    });
  } else {
    // Worker 进程之间可以共享任何形式的TCP连接
    // 也可以启动一个express的web服务
    app.listen(app.get("port"));
  }
}

if (0) {
  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
  }
}
